on:
  release:
    types:
      - created

permissions:
  contents: write
  id-token: write

name: release (linux)
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - arch: amd64
            cc:   gcc
          - arch: arm64
            cc:   aarch64-linux-gnu-gcc
          - arch: arm
            arm:  6
            cc:   arm-linux-gnueabi-gcc
          - arch: arm
            arm:  7
            cc:   arm-linux-gnueabihf-gcc

    env:
      GOOS:   linux
      GOARCH: ${{ matrix.arch }}
      GOARM:  ${{ matrix.arm }}
      CC:     ${{ matrix.cc }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"

      - id: release
        uses: bruceadams/get-release@v1.2.2
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Install cross-compilers
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf gcc-arm-linux-gnueabi

      - name: Install nfpm
        run: |
          wget https://github.com/goreleaser/nfpm/releases/download/v2.2.3/nfpm_2.2.3_Linux_x86_64.tar.gz
          tar zxvf nfpm_2.2.3_Linux_x86_64.tar.gz

      - name: Build litestream
        run: |
          rm -rf dist
          mkdir -p dist
          cp etc/litestream.yml etc/litestream.service dist
          cat etc/nfpm.yml | LITESTREAM_VERSION=${{ github.event.release.tag_name }} envsubst > dist/nfpm.yml
          CGO_ENABLED=1 go build -ldflags "-s -w -extldflags "-static" -X 'main.Version=${{ github.event.release.tag_name }}'" -tags osusergo,netgo,sqlite_omit_load_extension -o dist/litestream ./cmd/litestream

          cd dist
          tar -czvf litestream-${{ github.event.release.tag_name }}-${{ env.GOOS }}-${{ env.GOARCH }}${{ env.GOARM }}.tar.gz litestream
          ../nfpm pkg --config nfpm.yml --packager deb --target litestream-${{ github.event.release.tag_name }}-${{ env.GOOS }}-${{ env.GOARCH }}${{ env.GOARM }}.deb

      - name: publish the release binaries as a part of the Github release
        run: |
          gh release upload ${{ github.event.release.tag_name }} ./dist/litestream-*
        env:
          GITHUB_TOKEN: ${{ github.token }}
